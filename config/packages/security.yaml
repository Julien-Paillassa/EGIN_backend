security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    App\Entity\User: "auto"
    #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    #users_in_memory: { memory: null }
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login_check # or api_login_check as defined in config/routes.yaml
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api/
      stateless: true
      provider: app_user_provider
      jwt: ~

    main:
      #stateless: true
      #provider: app_user_provider
      json_login:
        #check_path: /login
        check_path: /authentication_token
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      #jwt: ~
      #custom_authenticators:
      #- App\Security\ApiKeyAuthenticator
      #logout:
      #path: app_logout
      #target: /login
      # where to redirect after logout
      # target: app_any_route

      #form_login:
      # "app_login" is the name of the route created previously
      #login_path: app_login
      #check_path: app_login

      # where to redirect after logout
      # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  role_hierarchy:
    ROLE_CONTRIBUTOR: ROLE_USER
    ROLE_ADMIN: ROLE_CONTRIBUTOR

  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI
    - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: PUBLIC_ACCESS }
    #- { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    #- { path: ^/, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/, roles: PUBLIC_ACCESS }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/payment, roles: PUBLIC_ACCESS }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
